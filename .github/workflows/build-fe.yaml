name: Build Frontend service
permissions: 
  contents: write
  id-token: write

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Build from github actions
        type: environment
      branch:
        description: Branch to build
        required: true
      trivy_test_scan_fe:
        description: "Run Trivy Test Scan"
        required: true
        type: boolean
        default: true
      unit_test:
        description: "Run Unit Tests"
        required: true
        type: boolean
        default: true

  pull_request:
    types:
      - closed
    branches:
      - "*.*.*"

jobs:
  build-frontend:
    name: Build frontend image
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'build' }}
    env:
      ECR_REPO_FE: "crdc-hub-frontend"
      REGION: "us-east-1"
#      CODE_BRANCH: "${{ github.event.inputs.code_branch }}"
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      TRIVY_TEST_SCAN_FE: ${{ github.event.inputs.trivy_test_scan_fe != '' && github.event.inputs.trivy_test_scan_fe || 'true' }}
      UNIT_TEST: ${{ github.event.inputs.unit_test != '' && github.event.inputs.unit_test || 'true' }}

    steps:

      - name: Checkout Code Repository
        uses: actions/checkout@v4
        with:
#          ref: ${{ env.CODE_BRANCH }}
#          ref: ${{ github.ref_name }}
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || github.event.pull_request.base.ref }}
          submodules: true

      - name: Extract branch name and set image tag
        id: extract_branch
        run: |
          #BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          # Determine branch name
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BRANCH_NAME="${{ github.event.inputs.branch }}"
          else
            BRANCH_NAME="${{ github.event.pull_request.base.ref }}"
          fi

          echo "branch=$BRANCH_NAME" >> "$GITHUB_ENV"
          echo "Current branch is: $BRANCH_NAME"
          git fetch --tags --force --quiet
          #tag=$(git tag -l $BRANCH_NAME* | tail -1)
          tag=$(git tag -l $BRANCH_NAME* | sort -V | tail -1)
          if  [ ! -z "$tag" ];
          then
            # Increment the build number if a tag is found
            build_num=$(echo "${tag##*.}")
            build_num=$((build_num+1))
            echo "IMAGE_TAG=$BRANCH_NAME.$build_num" >> $GITHUB_ENV
          else
            # If no tag is found create a new tag name
            build_num=1
            echo "IMAGE_TAG=$BRANCH_NAME.$build_num" >> $GITHUB_ENV
          fi
 
      - name: Setup Node
        uses: actions/setup-node@v4
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == true || (github.event_name == 'workflow_dispatch' && inputs.unit_test == 'true')
        with:
          node-version: "22.x"
          cache: "npm"

      - name: Run Unit Tests
        id: unit-test
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == true || (github.event_name == 'workflow_dispatch' && inputs.unit_test == 'true')
        run: |
          echo "Running unit tests..."
          npm i
          npm run test:ci
      
      - name: Build Frontend Docker Image
        id: build-image
        env:
          REGISTRY_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          #FE_IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO_FE }}:${{ env.branch }}.${{ github.run_number }}
          FE_IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO_FE }}:${{ env.IMAGE_TAG }}
        run: |
          echo "Building: $FE_IMAGE_NAME"
          docker build --no-cache -t $FE_IMAGE_NAME .

      - name: Run Trivy test scan for FE Docker Image
        id: trivy-scan-fe
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == true || (github.event_name == 'workflow_dispatch' && inputs.trivy_test_scan_fe == 'true')
        env:
          REGISTRY_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          #PV_PULLER_IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO_PVPULLER }}:${{ env.CODE_BRANCH }}.${{ github.run_number }}
          FE_IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO_FE }}:${{ env.IMAGE_TAG }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.FE_IMAGE_NAME }}'
          format: 'table'
          exit-code: 1
          severity: 'CRITICAL,HIGH'

      - name: Create git tag for image
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag ${{ env.IMAGE_TAG }}
          git push origin ${{ env.IMAGE_TAG }}

      - name: Configure AWS Role to assume using OIDC authentication
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - name: Login to Amazon ECR
        id: login-ecr
        env:
          REGISTRY_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        run:  |
          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $REGISTRY_URL

      - name: Push docker Image for FE
        if: success()
        env:
          REGISTRY_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com
          #PV_PULLER_IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO_PVPULLER }}:${{ env.CODE_BRANCH }}.${{ github.run_number }}
          FE_IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO_FE }}:${{ env.IMAGE_TAG }}
        run: |
          echo "Pushing: $FE_IMAGE_NAME"
          docker push $FE_IMAGE_NAME

      - name: Slack Notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        uses: act10ns/slack@87c73aef9f8838eb6feae81589a6b1487a4a9e08     # v1.6.0
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: always()
